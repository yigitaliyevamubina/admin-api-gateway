definitions:
  models.AddPolicyRequest:
    properties:
      policy:
        $ref: '#/definitions/models.Policy'
    type: object
  models.AdminLoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.AdminLoginResp:
    properties:
      access_token:
        type: string
      success:
        type: boolean
    type: object
  models.AdminReq:
    properties:
      age:
        type: integer
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  models.AdminUpdateReq:
    properties:
      age:
        type: integer
      full_name:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  models.ChangePasswordReq:
    properties:
      email:
        type: string
      new_password:
        type: string
    type: object
  models.DeleteAdmin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Department:
    properties:
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      work_ends_at:
        type: string
      work_starts_at:
        type: string
    type: object
  models.DepartmentResp:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      updated_at:
        type: string
      work_ends_at:
        type: string
      work_starts_at:
        type: string
    type: object
  models.DoctorModel:
    properties:
      access_token:
        type: string
      address:
        type: string
      biography:
        type: string
      birth_date:
        type: string
      created_at:
        type: string
      department_id:
        type: integer
      email:
        type: string
      end_work_year:
        type: string
      full_name:
        type: string
      gender:
        type: string
      id:
        type: string
      password:
        type: string
      phone_number:
        type: string
      salary:
        type: number
      spec_ids:
        items:
          type: integer
        type: array
      start_work_year:
        type: string
      updated_at:
        type: string
      work_years:
        type: integer
    type: object
  models.DoctorReq:
    properties:
      address:
        type: string
      biography:
        type: string
      birth_date:
        type: string
      department_id:
        type: integer
      email:
        type: string
      end_work_year:
        type: string
      first_name:
        type: string
      gender:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      salary:
        type: number
      spec_ids:
        items:
          type: integer
        type: array
      start_work_year:
        type: string
      work_years:
        type: integer
    type: object
  models.DoctorResp:
    properties:
      address:
        type: string
      biography:
        type: string
      birth_date:
        type: string
      created_at:
        type: string
      department_id:
        type: integer
      email:
        type: string
      end_work_year:
        type: string
      full_name:
        type: string
      gender:
        type: string
      id:
        type: string
      password:
        type: string
      phone_number:
        type: string
      salary:
        type: number
      spec_ids:
        items:
          type: integer
        type: array
      start_work_year:
        type: string
      updated_at:
        type: string
      work_years:
        type: integer
    type: object
  models.DoctorUpdateReq:
    properties:
      address:
        type: string
      biography:
        type: string
      birth_date:
        type: string
      department_id:
        type: integer
      end_work_year:
        type: string
      full_name:
        type: string
      id:
        type: string
      salary:
        type: number
      start_work_year:
        type: string
      work_years:
        type: integer
    type: object
  models.ListAdminsResp:
    properties:
      admins:
        items:
          $ref: '#/definitions/models.AdminReq'
        type: array
      count:
        type: integer
    type: object
  models.ListDoctors:
    properties:
      count:
        type: integer
      doctors:
        items:
          $ref: '#/definitions/models.DoctorResp'
        type: array
    type: object
  models.ListRolePolicyResp:
    properties:
      policies:
        items:
          $ref: '#/definitions/models.Policy'
        type: array
    type: object
  models.ListUsersResp:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.UserResp'
        type: array
    type: object
  models.LoginReqModel:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginRespModel:
    properties:
      result:
        type: boolean
      user:
        $ref: '#/definitions/models.UserModel'
    type: object
  models.Policy:
    properties:
      endpoint:
        type: string
      method:
        type: string
      role:
        type: string
    type: object
  models.RbacAllRolesResp:
    properties:
      roles:
        items:
          type: string
        type: array
    type: object
  models.RegisterRespModel:
    properties:
      message:
        type: string
    type: object
  models.Status:
    properties:
      message:
        type: string
    type: object
  models.SuperAdminMessage:
    properties:
      message:
        type: string
    type: object
  models.UpdateRefreshTokenReq:
    properties:
      refresh_token:
        type: string
    type: object
  models.User:
    properties:
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  models.UserModel:
    properties:
      access_token:
        type: string
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  models.UserResp:
    properties:
      birth_date:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
      updated_at:
        type: string
    type: object
  models.VerifyRespModel:
    properties:
      access_token:
        type: string
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
host: localhost:7070
info:
  contact: {}
  description: api-gateway
  title: Clinic system
  version: "1.0"
paths:
  /v1/auth/admins/{page}/{limit}:
    get:
      consumes:
      - application/json
      description: list all admins
      parameters:
      - description: page
        in: path
        name: page
        type: string
      - description: limit
        in: path
        name: limit
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ListAdminsResp'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: list admins
      tags:
      - Auth
  /v1/auth/create:
    post:
      consumes:
      - application/json
      description: Create a new admin if you are a superadmin
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      - description: admin
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.AdminReq'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuperAdminMessage'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create admin
      tags:
      - Auth
  /v1/auth/delete:
    delete:
      consumes:
      - application/json
      description: delete admin if you are a superadmin
      parameters:
      - description: username
        in: query
        name: username
        type: string
      - description: password
        in: query
        name: password
        type: string
      - description: admin
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.DeleteAdmin'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuperAdminMessage'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete admin
      tags:
      - Auth
  /v1/auth/get/{id}:
    get:
      consumes:
      - application/json
      description: get admin
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AdminReq'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get admin
      tags:
      - Auth
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: login as admin
      parameters:
      - description: Login
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.AdminLoginReq'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AdminLoginResp'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: login
      tags:
      - Auth
  /v1/auth/update:
    put:
      consumes:
      - application/json
      description: update admin
      parameters:
      - description: admin
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.AdminUpdateReq'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AdminReq'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update admin
      tags:
      - Auth
  /v1/department/{id}:
    get:
      consumes:
      - application/json
      description: Get department
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.DepartmentResp'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get department by id
      tags:
      - Department
  /v1/department/create:
    post:
      consumes:
      - application/json
      description: Create a new department with the provided details
      parameters:
      - description: Create department
        in: body
        name: DepartmentInfo
        required: true
        schema:
          $ref: '#/definitions/models.Department'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.DepartmentResp'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create department
      tags:
      - Department
  /v1/department/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete department
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete doctor
      tags:
      - Department
  /v1/department/update/{id}:
    put:
      consumes:
      - application/json
      description: Update department
      parameters:
      - description: id
        in: path
        name: id
        type: integer
      - description: Update Department
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/models.DoctorUpdateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.DoctorResp'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update department
      tags:
      - Department
  /v1/departments/{page}/{limit}:
    get:
      consumes:
      - application/json
      description: get all departments
      parameters:
      - description: page
        in: path
        name: page
        type: string
      - description: limit
        in: path
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ListDoctors'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get departments' list
      tags:
      - Department
  /v1/doctor/{id}:
    get:
      consumes:
      - application/json
      description: Get user
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.DoctorResp'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get doctor by id
      tags:
      - Doctor
  /v1/doctor/create:
    post:
      consumes:
      - application/json
      description: Create a new doctor with the provided details
      parameters:
      - description: Create doctor
        in: body
        name: DoctorInfo
        required: true
        schema:
          $ref: '#/definitions/models.DoctorReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.DoctorModel'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create doctor
      tags:
      - Doctor
  /v1/doctor/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete doctor
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete doctor
      tags:
      - Doctor
  /v1/doctor/update/{id}:
    put:
      consumes:
      - application/json
      description: Update doctor
      parameters:
      - description: id
        in: path
        name: id
        type: string
      - description: Update Doctor
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/models.DoctorUpdateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.DoctorResp'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update doctor
      tags:
      - Doctor
  /v1/doctors/{page}/{limit}:
    get:
      consumes:
      - application/json
      description: get all doctors
      parameters:
      - description: page
        in: path
        name: page
        type: string
      - description: limit
        in: path
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ListDoctors'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get doctors' list
      tags:
      - Doctor
  /v1/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.LoginReqModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.LoginRespModel'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: login user
      tags:
      - User
  /v1/rbac/add/policy:
    post:
      consumes:
      - application/json
      description: Add policy to a role
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      - description: policy
        in: body
        name: policy
        required: true
        schema:
          $ref: '#/definitions/models.AddPolicyRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuperAdminMessage'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: add policy to a role
      tags:
      - RBAC
  /v1/rbac/delete/policy:
    delete:
      consumes:
      - application/json
      description: Delete policy
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      - description: policy
        in: body
        name: policy
        required: true
        schema:
          $ref: '#/definitions/models.AddPolicyRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuperAdminMessage'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete policy
      tags:
      - RBAC
  /v1/rbac/policies/{role}:
    get:
      consumes:
      - application/json
      description: Get all policies of a role
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      - description: role
        in: path
        name: role
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ListRolePolicyResp'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get all policies of a role
      tags:
      - RBAC
  /v1/rbac/roles:
    get:
      consumes:
      - application/json
      description: List roles
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RbacAllRolesResp'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: list roles
      tags:
      - RBAC
  /v1/register:
    post:
      consumes:
      - application/json
      description: Registration
      parameters:
      - description: Register user
        in: body
        name: UserData
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RegisterRespModel'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: register user
      tags:
      - User
  /v1/user/{id}:
    get:
      consumes:
      - application/json
      description: Get user
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get user by id
      tags:
      - User
  /v1/user/create:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: Create user
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserModel'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create user
      tags:
      - User
  /v1/user/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: delete user
      tags:
      - User
  /v1/user/password:
    post:
      consumes:
      - application/json
      description: Change password
      parameters:
      - description: Change password
        in: body
        name: Change-password
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: change password
      tags:
      - User
  /v1/user/refresh:
    post:
      consumes:
      - application/json
      description: Update refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh-token
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRefreshTokenReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserModel'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: update refresh token
      tags:
      - User
  /v1/user/update/{id}:
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: id
        in: path
        name: id
        type: string
      - description: Update User
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update user
      tags:
      - User
  /v1/users/{page}/{limit}/{filter}:
    get:
      consumes:
      - application/json
      description: get all users
      parameters:
      - description: page
        in: path
        name: page
        type: string
      - description: limit
        in: path
        name: limit
        type: string
      - description: filter
        in: path
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ListUsersResp'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: get users' list
      tags:
      - User
  /v1/verify/{email}/{code}:
    get:
      consumes:
      - application/json
      description: Verify a user with code sent to their email
      parameters:
      - description: email
        in: path
        name: email
        required: true
        type: string
      - description: code
        in: path
        name: code
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.VerifyRespModel'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: verify user
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
