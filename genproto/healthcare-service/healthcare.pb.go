// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: healthcare-service/healthcare.proto

package healthcare

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Email struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Email) Reset()         { *m = Email{} }
func (m *Email) String() string { return proto.CompactTextString(m) }
func (*Email) ProtoMessage()    {}
func (*Email) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{0}
}
func (m *Email) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Email) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Email.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Email) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Email.Merge(m, src)
}
func (m *Email) XXX_Size() int {
	return m.Size()
}
func (m *Email) XXX_DiscardUnknown() {
	xxx_messageInfo_Email.DiscardUnknown(m)
}

var xxx_messageInfo_Email proto.InternalMessageInfo

func (m *Email) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type CheckUniqReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckUniqReq) Reset()         { *m = CheckUniqReq{} }
func (m *CheckUniqReq) String() string { return proto.CompactTextString(m) }
func (*CheckUniqReq) ProtoMessage()    {}
func (*CheckUniqReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{1}
}
func (m *CheckUniqReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckUniqReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckUniqReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckUniqReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckUniqReq.Merge(m, src)
}
func (m *CheckUniqReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckUniqReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckUniqReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckUniqReq proto.InternalMessageInfo

func (m *CheckUniqReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *CheckUniqReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Doctor struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FullName             string   `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password"`
	BirthDate            string   `protobuf:"bytes,4,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	Gender               string   `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender"`
	PhoneNumber          string   `protobuf:"bytes,6,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	Email                string   `protobuf:"bytes,7,opt,name=email,proto3" json:"email"`
	Address              string   `protobuf:"bytes,8,opt,name=address,proto3" json:"address"`
	Salary               float32  `protobuf:"fixed32,9,opt,name=salary,proto3" json:"salary"`
	Biography            string   `protobuf:"bytes,10,opt,name=biography,proto3" json:"biography"`
	StartWorkYear        string   `protobuf:"bytes,11,opt,name=start_work_year,json=startWorkYear,proto3" json:"start_work_year"`
	EndWorkYear          string   `protobuf:"bytes,12,opt,name=end_work_year,json=endWorkYear,proto3" json:"end_work_year"`
	WorkYears            int64    `protobuf:"varint,13,opt,name=work_years,json=workYears,proto3" json:"work_years"`
	DepartmentId         int64    `protobuf:"varint,14,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	RefreshToken         string   `protobuf:"bytes,15,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token"`
	CreatedAt            string   `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,18,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	SpecIds              []int64  `protobuf:"varint,19,rep,packed,name=spec_ids,json=specIds,proto3" json:"spec_ids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Doctor) Reset()         { *m = Doctor{} }
func (m *Doctor) String() string { return proto.CompactTextString(m) }
func (*Doctor) ProtoMessage()    {}
func (*Doctor) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{2}
}
func (m *Doctor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Doctor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Doctor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Doctor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Doctor.Merge(m, src)
}
func (m *Doctor) XXX_Size() int {
	return m.Size()
}
func (m *Doctor) XXX_DiscardUnknown() {
	xxx_messageInfo_Doctor.DiscardUnknown(m)
}

var xxx_messageInfo_Doctor proto.InternalMessageInfo

func (m *Doctor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Doctor) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *Doctor) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Doctor) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *Doctor) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Doctor) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Doctor) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Doctor) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Doctor) GetSalary() float32 {
	if m != nil {
		return m.Salary
	}
	return 0
}

func (m *Doctor) GetBiography() string {
	if m != nil {
		return m.Biography
	}
	return ""
}

func (m *Doctor) GetStartWorkYear() string {
	if m != nil {
		return m.StartWorkYear
	}
	return ""
}

func (m *Doctor) GetEndWorkYear() string {
	if m != nil {
		return m.EndWorkYear
	}
	return ""
}

func (m *Doctor) GetWorkYears() int64 {
	if m != nil {
		return m.WorkYears
	}
	return 0
}

func (m *Doctor) GetDepartmentId() int64 {
	if m != nil {
		return m.DepartmentId
	}
	return 0
}

func (m *Doctor) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *Doctor) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Doctor) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Doctor) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

func (m *Doctor) GetSpecIds() []int64 {
	if m != nil {
		return m.SpecIds
	}
	return nil
}

type GetReqStr struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReqStr) Reset()         { *m = GetReqStr{} }
func (m *GetReqStr) String() string { return proto.CompactTextString(m) }
func (*GetReqStr) ProtoMessage()    {}
func (*GetReqStr) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{3}
}
func (m *GetReqStr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReqStr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReqStr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReqStr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReqStr.Merge(m, src)
}
func (m *GetReqStr) XXX_Size() int {
	return m.Size()
}
func (m *GetReqStr) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReqStr.DiscardUnknown(m)
}

var xxx_messageInfo_GetReqStr proto.InternalMessageInfo

func (m *GetReqStr) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetAll struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAll) Reset()         { *m = GetAll{} }
func (m *GetAll) String() string { return proto.CompactTextString(m) }
func (*GetAll) ProtoMessage()    {}
func (*GetAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{4}
}
func (m *GetAll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAll.Merge(m, src)
}
func (m *GetAll) XXX_Size() int {
	return m.Size()
}
func (m *GetAll) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAll.DiscardUnknown(m)
}

var xxx_messageInfo_GetAll proto.InternalMessageInfo

func (m *GetAll) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAll) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListDoctors struct {
	Count                int64     `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Doctors              []*Doctor `protobuf:"bytes,2,rep,name=doctors,proto3" json:"doctors"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListDoctors) Reset()         { *m = ListDoctors{} }
func (m *ListDoctors) String() string { return proto.CompactTextString(m) }
func (*ListDoctors) ProtoMessage()    {}
func (*ListDoctors) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{5}
}
func (m *ListDoctors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDoctors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDoctors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDoctors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDoctors.Merge(m, src)
}
func (m *ListDoctors) XXX_Size() int {
	return m.Size()
}
func (m *ListDoctors) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDoctors.DiscardUnknown(m)
}

var xxx_messageInfo_ListDoctors proto.InternalMessageInfo

func (m *ListDoctors) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListDoctors) GetDoctors() []*Doctor {
	if m != nil {
		return m.Doctors
	}
	return nil
}

type GetReqInt struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReqInt) Reset()         { *m = GetReqInt{} }
func (m *GetReqInt) String() string { return proto.CompactTextString(m) }
func (*GetReqInt) ProtoMessage()    {}
func (*GetReqInt) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{6}
}
func (m *GetReqInt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReqInt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReqInt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReqInt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReqInt.Merge(m, src)
}
func (m *GetReqInt) XXX_Size() int {
	return m.Size()
}
func (m *GetReqInt) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReqInt.DiscardUnknown(m)
}

var xxx_messageInfo_GetReqInt proto.InternalMessageInfo

func (m *GetReqInt) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Department struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description"`
	ComeTime             string   `protobuf:"bytes,4,opt,name=come_time,json=comeTime,proto3" json:"come_time"`
	FinishTime           string   `protobuf:"bytes,5,opt,name=finish_time,json=finishTime,proto3" json:"finish_time"`
	ImageUrl             string   `protobuf:"bytes,6,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
	CreatedAt            string   `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Department) Reset()         { *m = Department{} }
func (m *Department) String() string { return proto.CompactTextString(m) }
func (*Department) ProtoMessage()    {}
func (*Department) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{7}
}
func (m *Department) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Department) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Department.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Department) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Department.Merge(m, src)
}
func (m *Department) XXX_Size() int {
	return m.Size()
}
func (m *Department) XXX_DiscardUnknown() {
	xxx_messageInfo_Department.DiscardUnknown(m)
}

var xxx_messageInfo_Department proto.InternalMessageInfo

func (m *Department) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Department) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Department) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Department) GetComeTime() string {
	if m != nil {
		return m.ComeTime
	}
	return ""
}

func (m *Department) GetFinishTime() string {
	if m != nil {
		return m.FinishTime
	}
	return ""
}

func (m *Department) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *Department) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Department) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Department) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type ListDepartments struct {
	Count                int64         `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Departments          []*Department `protobuf:"bytes,2,rep,name=departments,proto3" json:"departments"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListDepartments) Reset()         { *m = ListDepartments{} }
func (m *ListDepartments) String() string { return proto.CompactTextString(m) }
func (*ListDepartments) ProtoMessage()    {}
func (*ListDepartments) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{8}
}
func (m *ListDepartments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDepartments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDepartments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDepartments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDepartments.Merge(m, src)
}
func (m *ListDepartments) XXX_Size() int {
	return m.Size()
}
func (m *ListDepartments) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDepartments.DiscardUnknown(m)
}

var xxx_messageInfo_ListDepartments proto.InternalMessageInfo

func (m *ListDepartments) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListDepartments) GetDepartments() []*Department {
	if m != nil {
		return m.Departments
	}
	return nil
}

type Specializations struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description"`
	DepartmentId         int64    `protobuf:"varint,4,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	CreatedAt            string   `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Specializations) Reset()         { *m = Specializations{} }
func (m *Specializations) String() string { return proto.CompactTextString(m) }
func (*Specializations) ProtoMessage()    {}
func (*Specializations) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{9}
}
func (m *Specializations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Specializations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Specializations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Specializations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Specializations.Merge(m, src)
}
func (m *Specializations) XXX_Size() int {
	return m.Size()
}
func (m *Specializations) XXX_DiscardUnknown() {
	xxx_messageInfo_Specializations.DiscardUnknown(m)
}

var xxx_messageInfo_Specializations proto.InternalMessageInfo

func (m *Specializations) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Specializations) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Specializations) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Specializations) GetDepartmentId() int64 {
	if m != nil {
		return m.DepartmentId
	}
	return 0
}

func (m *Specializations) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Specializations) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Specializations) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type ListSpecializations struct {
	Count                int64              `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Specializations      []*Specializations `protobuf:"bytes,2,rep,name=specializations,proto3" json:"specializations"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListSpecializations) Reset()         { *m = ListSpecializations{} }
func (m *ListSpecializations) String() string { return proto.CompactTextString(m) }
func (*ListSpecializations) ProtoMessage()    {}
func (*ListSpecializations) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{10}
}
func (m *ListSpecializations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSpecializations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSpecializations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSpecializations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSpecializations.Merge(m, src)
}
func (m *ListSpecializations) XXX_Size() int {
	return m.Size()
}
func (m *ListSpecializations) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSpecializations.DiscardUnknown(m)
}

var xxx_messageInfo_ListSpecializations proto.InternalMessageInfo

func (m *ListSpecializations) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListSpecializations) GetSpecializations() []*Specializations {
	if m != nil {
		return m.Specializations
	}
	return nil
}

type DocSpecPrices struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	DoctorId             string   `protobuf:"bytes,2,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	SpecializationId     int64    `protobuf:"varint,3,opt,name=specialization_id,json=specializationId,proto3" json:"specialization_id"`
	OnlinePrice          float32  `protobuf:"fixed32,4,opt,name=online_price,json=onlinePrice,proto3" json:"online_price"`
	OfflinePrice         float32  `protobuf:"fixed32,5,opt,name=offline_price,json=offlinePrice,proto3" json:"offline_price"`
	CreatedAt            string   `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DocSpecPrices) Reset()         { *m = DocSpecPrices{} }
func (m *DocSpecPrices) String() string { return proto.CompactTextString(m) }
func (*DocSpecPrices) ProtoMessage()    {}
func (*DocSpecPrices) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{11}
}
func (m *DocSpecPrices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocSpecPrices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocSpecPrices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocSpecPrices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocSpecPrices.Merge(m, src)
}
func (m *DocSpecPrices) XXX_Size() int {
	return m.Size()
}
func (m *DocSpecPrices) XXX_DiscardUnknown() {
	xxx_messageInfo_DocSpecPrices.DiscardUnknown(m)
}

var xxx_messageInfo_DocSpecPrices proto.InternalMessageInfo

func (m *DocSpecPrices) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DocSpecPrices) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *DocSpecPrices) GetSpecializationId() int64 {
	if m != nil {
		return m.SpecializationId
	}
	return 0
}

func (m *DocSpecPrices) GetOnlinePrice() float32 {
	if m != nil {
		return m.OnlinePrice
	}
	return 0
}

func (m *DocSpecPrices) GetOfflinePrice() float32 {
	if m != nil {
		return m.OfflinePrice
	}
	return 0
}

func (m *DocSpecPrices) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *DocSpecPrices) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *DocSpecPrices) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type ListDoctorSpecPrice struct {
	Count                int64            `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Prices               []*DocSpecPrices `protobuf:"bytes,2,rep,name=prices,proto3" json:"prices"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListDoctorSpecPrice) Reset()         { *m = ListDoctorSpecPrice{} }
func (m *ListDoctorSpecPrice) String() string { return proto.CompactTextString(m) }
func (*ListDoctorSpecPrice) ProtoMessage()    {}
func (*ListDoctorSpecPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{12}
}
func (m *ListDoctorSpecPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDoctorSpecPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDoctorSpecPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDoctorSpecPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDoctorSpecPrice.Merge(m, src)
}
func (m *ListDoctorSpecPrice) XXX_Size() int {
	return m.Size()
}
func (m *ListDoctorSpecPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDoctorSpecPrice.DiscardUnknown(m)
}

var xxx_messageInfo_ListDoctorSpecPrice proto.InternalMessageInfo

func (m *ListDoctorSpecPrice) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListDoctorSpecPrice) GetPrices() []*DocSpecPrices {
	if m != nil {
		return m.Prices
	}
	return nil
}

type Status struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_529158dfd12c8882, []int{13}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*Email)(nil), "healthcare.Email")
	proto.RegisterType((*CheckUniqReq)(nil), "healthcare.CheckUniqReq")
	proto.RegisterType((*Doctor)(nil), "healthcare.Doctor")
	proto.RegisterType((*GetReqStr)(nil), "healthcare.GetReqStr")
	proto.RegisterType((*GetAll)(nil), "healthcare.GetAll")
	proto.RegisterType((*ListDoctors)(nil), "healthcare.ListDoctors")
	proto.RegisterType((*GetReqInt)(nil), "healthcare.GetReqInt")
	proto.RegisterType((*Department)(nil), "healthcare.Department")
	proto.RegisterType((*ListDepartments)(nil), "healthcare.ListDepartments")
	proto.RegisterType((*Specializations)(nil), "healthcare.Specializations")
	proto.RegisterType((*ListSpecializations)(nil), "healthcare.ListSpecializations")
	proto.RegisterType((*DocSpecPrices)(nil), "healthcare.DocSpecPrices")
	proto.RegisterType((*ListDoctorSpecPrice)(nil), "healthcare.ListDoctorSpecPrice")
	proto.RegisterType((*Status)(nil), "healthcare.Status")
}

func init() {
	proto.RegisterFile("healthcare-service/healthcare.proto", fileDescriptor_529158dfd12c8882)
}

var fileDescriptor_529158dfd12c8882 = []byte{
	// 1204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x5f, 0x6f, 0x1b, 0xc5,
	0x17, 0xfd, 0xd9, 0x4e, 0xfc, 0xe7, 0xda, 0xae, 0xed, 0x69, 0xda, 0xdf, 0xd6, 0x26, 0xa9, 0xd9,
	0x4a, 0x28, 0x12, 0xd0, 0x8a, 0x20, 0x55, 0x50, 0xc2, 0x83, 0x5d, 0x87, 0x60, 0xb5, 0x54, 0x61,
	0xd3, 0xa8, 0x42, 0x42, 0xac, 0x26, 0xbb, 0xe3, 0x78, 0x94, 0xf5, 0xae, 0x33, 0x3b, 0x6e, 0x08,
	0x1f, 0x81, 0x07, 0x9e, 0xf9, 0x34, 0x3c, 0x22, 0x1e, 0x79, 0xe5, 0x0d, 0x85, 0x2f, 0x82, 0xe6,
	0x8f, 0xbd, 0xe3, 0x8d, 0x6d, 0x92, 0x08, 0xde, 0xf6, 0x9e, 0x7b, 0xe6, 0xce, 0xcc, 0xb9, 0x7b,
	0xcf, 0xda, 0xf0, 0x68, 0x48, 0x70, 0xc0, 0x87, 0x1e, 0x66, 0xe4, 0xc3, 0x98, 0xb0, 0xb7, 0xd4,
	0x23, 0x4f, 0x12, 0xe8, 0xf1, 0x98, 0x45, 0x3c, 0x42, 0x90, 0x20, 0xf6, 0x26, 0xac, 0xef, 0x8d,
	0x30, 0x0d, 0xd0, 0x06, 0xac, 0x13, 0xf1, 0x60, 0x65, 0xda, 0x99, 0xed, 0x92, 0xa3, 0x02, 0xfb,
	0x19, 0x54, 0x9e, 0x0f, 0x89, 0x77, 0x7a, 0x14, 0xd2, 0x33, 0x87, 0x9c, 0x09, 0xd6, 0x80, 0x92,
	0xc0, 0x9f, 0xb2, 0x64, 0x20, 0xd0, 0xb7, 0x38, 0x98, 0x10, 0x2b, 0xab, 0x50, 0x19, 0xd8, 0xbf,
	0xac, 0x41, 0xbe, 0x17, 0x79, 0x3c, 0x62, 0xe8, 0x0e, 0x64, 0xe9, 0x74, 0x4d, 0x96, 0xfa, 0xa8,
	0x05, 0xa5, 0xc1, 0x24, 0x08, 0xdc, 0x10, 0x8f, 0xa6, 0x8b, 0x8a, 0x02, 0x78, 0x85, 0x47, 0x04,
	0x35, 0xa1, 0x38, 0xc6, 0x71, 0x7c, 0x1e, 0x31, 0xdf, 0xca, 0xa9, 0xdc, 0x34, 0x46, 0x9b, 0x00,
	0xc7, 0x94, 0xf1, 0xa1, 0xeb, 0x63, 0x4e, 0xac, 0x35, 0x99, 0x2d, 0x49, 0xa4, 0x87, 0x39, 0x41,
	0xf7, 0x21, 0x7f, 0x42, 0x42, 0x9f, 0x30, 0x6b, 0x5d, 0xa6, 0x74, 0x84, 0xde, 0x85, 0xca, 0x78,
	0x18, 0x85, 0xc4, 0x0d, 0x27, 0xa3, 0x63, 0xc2, 0xac, 0xbc, 0xcc, 0x96, 0x25, 0xf6, 0x4a, 0x42,
	0xc9, 0xfd, 0x0b, 0xc6, 0xfd, 0x91, 0x05, 0x05, 0xec, 0xfb, 0x8c, 0xc4, 0xb1, 0x55, 0x94, 0xf8,
	0x34, 0x14, 0x5b, 0xc5, 0x38, 0xc0, 0xec, 0xc2, 0x2a, 0xb5, 0x33, 0xdb, 0x59, 0x47, 0x47, 0xe8,
	0x1d, 0x28, 0x1d, 0xd3, 0xe8, 0x84, 0xe1, 0xf1, 0xf0, 0xc2, 0x82, 0xe9, 0x01, 0x35, 0x80, 0xde,
	0x83, 0x5a, 0xcc, 0x31, 0xe3, 0xee, 0x79, 0xc4, 0x4e, 0xdd, 0x0b, 0x82, 0x99, 0x55, 0x96, 0x9c,
	0xaa, 0x84, 0xdf, 0x44, 0xec, 0xf4, 0x1b, 0x82, 0x19, 0xb2, 0xa1, 0x4a, 0x42, 0xdf, 0x60, 0x55,
	0xd4, 0x89, 0x49, 0xe8, 0xcf, 0x38, 0x9b, 0x00, 0xb3, 0x7c, 0x6c, 0x55, 0xdb, 0x99, 0xed, 0x9c,
	0x53, 0x3a, 0xd7, 0xd9, 0x18, 0x3d, 0x82, 0xaa, 0x4f, 0xc6, 0x98, 0xf1, 0x11, 0x09, 0xb9, 0x4b,
	0x7d, 0xeb, 0x8e, 0x64, 0x54, 0x12, 0xb0, 0xef, 0x0b, 0x12, 0x23, 0x03, 0x46, 0xe2, 0xa1, 0xcb,
	0xa3, 0x53, 0x12, 0x5a, 0x35, 0xb9, 0x4f, 0x45, 0x83, 0xaf, 0x05, 0x26, 0x36, 0xf2, 0x18, 0xc1,
	0x9c, 0xf8, 0x2e, 0xe6, 0x56, 0x5d, 0xdd, 0x49, 0x23, 0x1d, 0x2e, 0xd2, 0x93, 0xb1, 0x3f, 0x4d,
	0x37, 0x54, 0x5a, 0x23, 0x2a, 0xed, 0x93, 0x80, 0xe8, 0x34, 0x52, 0x69, 0x8d, 0x74, 0x38, 0x7a,
	0x00, 0xc5, 0x78, 0x4c, 0x3c, 0x97, 0xfa, 0xb1, 0x75, 0xb7, 0x9d, 0xdb, 0xce, 0x39, 0x05, 0x11,
	0xf7, 0xfd, 0xd8, 0x6e, 0x41, 0x69, 0x9f, 0x70, 0x87, 0x9c, 0x1d, 0xf2, 0x2b, 0xaf, 0x90, 0xbd,
	0x03, 0xf9, 0x7d, 0xc2, 0x3b, 0x41, 0x80, 0x10, 0xac, 0x8d, 0xf1, 0x09, 0x91, 0xb9, 0x9c, 0x23,
	0x9f, 0x45, 0x37, 0x03, 0x3a, 0xa2, 0x5c, 0xbe, 0x5c, 0x39, 0x47, 0x05, 0xf6, 0xd7, 0x50, 0x7e,
	0x49, 0x63, 0xae, 0x5e, 0xca, 0x58, 0x90, 0xbc, 0x68, 0x12, 0x72, 0xbd, 0x52, 0x05, 0xe8, 0x03,
	0x28, 0xf8, 0x8a, 0x60, 0x65, 0xdb, 0xb9, 0xed, 0xf2, 0x0e, 0x7a, 0x6c, 0x4c, 0x90, 0x5a, 0xeb,
	0x4c, 0x29, 0xc9, 0x19, 0xfb, 0x21, 0x37, 0xce, 0x98, 0x93, 0x67, 0xfc, 0x31, 0x0b, 0xd0, 0x9b,
	0xc9, 0x6d, 0xa4, 0xd7, 0xe5, 0x14, 0x20, 0x58, 0x33, 0x06, 0x40, 0x3e, 0xa3, 0x36, 0x94, 0x7d,
	0x12, 0x7b, 0x8c, 0x8e, 0x39, 0x8d, 0x42, 0xfd, 0xfe, 0x9b, 0x90, 0x98, 0x1d, 0x2f, 0x1a, 0x11,
	0x97, 0xd3, 0xd1, 0x74, 0x02, 0x8a, 0x02, 0x78, 0x4d, 0x47, 0x04, 0x3d, 0x84, 0xf2, 0x80, 0x86,
	0x54, 0xb4, 0x53, 0xa4, 0xd5, 0x14, 0x80, 0x82, 0x24, 0xa1, 0x05, 0x25, 0x3a, 0xc2, 0x27, 0xc4,
	0x9d, 0xb0, 0x40, 0x8f, 0x41, 0x51, 0x02, 0x47, 0x2c, 0x48, 0x35, 0xba, 0xb0, 0xba, 0xd1, 0xc5,
	0xd5, 0x8d, 0x2e, 0xa5, 0x1a, 0x6d, 0x63, 0xa8, 0x49, 0xf1, 0x67, 0x7a, 0x2c, 0x6b, 0xc0, 0x27,
	0x42, 0x82, 0x19, 0x49, 0x37, 0xe1, 0xfe, 0x5c, 0x13, 0x66, 0x69, 0xc7, 0xa4, 0xda, 0x7f, 0x64,
	0xa0, 0x76, 0x38, 0x26, 0x1e, 0xc5, 0x01, 0xfd, 0x01, 0x0b, 0xb5, 0xe2, 0x74, 0x4f, 0x6e, 0x29,
	0xfa, 0x95, 0x61, 0x5a, 0x5b, 0x30, 0x4c, 0xff, 0xa9, 0x7c, 0x0c, 0xee, 0x0a, 0xf9, 0xd2, 0xd7,
	0x5b, 0x2c, 0xe1, 0x1e, 0xd4, 0xe2, 0x79, 0xa2, 0x96, 0xb1, 0x65, 0xca, 0x98, 0xaa, 0xe5, 0xa4,
	0xd7, 0xd8, 0x3f, 0x65, 0xa1, 0xda, 0x8b, 0x3c, 0xc1, 0x3b, 0x60, 0xd4, 0x23, 0x57, 0xd5, 0x6c,
	0x41, 0x49, 0x4d, 0x82, 0xd0, 0x44, 0x1b, 0xb9, 0x02, 0xfa, 0x3e, 0x7a, 0x1f, 0x1a, 0xf3, 0x15,
	0x05, 0x29, 0x27, 0xd7, 0xd6, 0xe7, 0x13, 0x7d, 0x5f, 0x58, 0x74, 0x14, 0x06, 0x34, 0x24, 0xee,
	0x58, 0x6c, 0x25, 0x05, 0xce, 0x3a, 0x65, 0x85, 0xc9, 0xdd, 0x45, 0x13, 0xa2, 0xc1, 0xc0, 0xe0,
	0xac, 0x4b, 0x4e, 0x45, 0x83, 0x8a, 0x34, 0xdf, 0x84, 0xfc, 0xea, 0x26, 0x14, 0x56, 0x37, 0xa1,
	0x98, 0x6e, 0xc2, 0x77, 0xaa, 0x09, 0xca, 0x04, 0x66, 0xb2, 0x2c, 0x69, 0xc2, 0x47, 0x90, 0x97,
	0xc7, 0x9c, 0x6a, 0xff, 0x20, 0xe5, 0x23, 0x89, 0xac, 0x8e, 0x26, 0xda, 0x6d, 0xc8, 0x1f, 0x72,
	0xcc, 0x27, 0xea, 0xf3, 0x22, 0x9f, 0x64, 0xcd, 0xa2, 0xa3, 0xa3, 0x9d, 0x5f, 0xab, 0xd0, 0xf8,
	0x72, 0x56, 0xe6, 0x50, 0x7d, 0xe2, 0xd1, 0xae, 0xf1, 0x99, 0x9e, 0x90, 0x18, 0x59, 0xe6, 0x56,
	0xe6, 0x07, 0xbc, 0x39, 0x67, 0x66, 0x7a, 0xaf, 0xa7, 0x50, 0x79, 0x2e, 0x05, 0xd2, 0x5f, 0xeb,
	0x05, 0x86, 0xd7, 0x5c, 0x80, 0xa1, 0x67, 0x50, 0xdd, 0x27, 0x5a, 0x8c, 0xee, 0x45, 0xdf, 0x47,
	0xf7, 0x4c, 0xd2, 0xcc, 0xba, 0x17, 0xae, 0xdd, 0x95, 0x6b, 0x3b, 0x41, 0x30, 0x35, 0x63, 0x94,
	0x5a, 0xdb, 0x09, 0x82, 0xe6, 0xff, 0x4d, 0xcc, 0x74, 0xee, 0xa7, 0x50, 0x39, 0x92, 0x3d, 0xbb,
	0xe1, 0x89, 0x3f, 0x85, 0x4a, 0x4f, 0x36, 0x53, 0xc7, 0xd7, 0x39, 0xb0, 0x16, 0xa9, 0x0b, 0x75,
	0x2d, 0x52, 0x62, 0xe8, 0x4b, 0x4c, 0xa9, 0xb9, 0x04, 0x47, 0x5d, 0x68, 0x08, 0xc1, 0x66, 0xc0,
	0x32, 0xd1, 0xfa, 0x2b, 0x6a, 0xf4, 0x64, 0x0d, 0x21, 0x9c, 0x61, 0xa4, 0x8b, 0xc4, 0x6b, 0x5d,
	0x11, 0xcf, 0x58, 0xd0, 0x85, 0xba, 0x16, 0xf0, 0xf6, 0xb7, 0xf9, 0x1c, 0xea, 0x5a, 0xcc, 0x04,
	0x5b, 0x72, 0x99, 0x45, 0x82, 0x1e, 0xc0, 0x86, 0x12, 0x74, 0xde, 0x86, 0xd0, 0x2a, 0x8b, 0x6a,
	0xae, 0x4a, 0xa2, 0x17, 0x70, 0x6f, 0x9f, 0xa4, 0x1c, 0x72, 0x95, 0xc4, 0x2b, 0x8b, 0xbd, 0x94,
	0xc5, 0x3a, 0x41, 0x90, 0x4e, 0x2c, 0xd2, 0xfa, 0x61, 0x5a, 0xeb, 0xf4, 0xa2, 0x03, 0xd8, 0x50,
	0x7a, 0xff, 0x6b, 0x97, 0xed, 0xc0, 0x86, 0x52, 0x3f, 0x55, 0xf1, 0x06, 0x1d, 0x78, 0x01, 0x77,
	0x67, 0x73, 0x6f, 0x78, 0xfc, 0x72, 0x9f, 0x6a, 0x2e, 0x4f, 0xa1, 0x1e, 0xd4, 0xb5, 0xf8, 0x12,
	0x58, 0xa5, 0xfb, 0x8a, 0x2a, 0x5f, 0x40, 0x2d, 0x51, 0x5d, 0x99, 0xeb, 0xb5, 0xf4, 0x4e, 0x3b,
	0xf2, 0x3e, 0xd4, 0x12, 0xbd, 0x15, 0x74, 0xbb, 0x6b, 0xed, 0x42, 0x2d, 0x91, 0x59, 0x15, 0xba,
	0x81, 0xc2, 0x5f, 0x41, 0x6b, 0xce, 0xe5, 0xba, 0x17, 0x3d, 0xf3, 0x07, 0xc3, 0x92, 0x4a, 0x4b,
	0x6d, 0xef, 0x5b, 0xb0, 0x13, 0x75, 0xe6, 0x6b, 0xbd, 0xa1, 0x7c, 0xa8, 0x8f, 0xbc, 0xa4, 0xea,
	0x3f, 0xbe, 0xa3, 0x4f, 0x20, 0xbf, 0xf7, 0x3d, 0x8d, 0x79, 0x8c, 0x1a, 0x26, 0x55, 0xfe, 0x3d,
	0x5c, 0xe8, 0xa6, 0x9f, 0x41, 0xc3, 0x74, 0x61, 0xf5, 0x3f, 0xf2, 0x9a, 0x56, 0xdc, 0xad, 0xff,
	0x76, 0xb9, 0x95, 0xf9, 0xfd, 0x72, 0x2b, 0xf3, 0xe7, 0xe5, 0x56, 0xe6, 0xe7, 0xbf, 0xb6, 0xfe,
	0x77, 0x9c, 0x97, 0xff, 0x4e, 0x3f, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xcf, 0xfc, 0x08,
	0xc4, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HealthcareServiceClient is the client API for HealthcareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthcareServiceClient interface {
	CheckUniques(ctx context.Context, in *CheckUniqReq, opts ...grpc.CallOption) (*Status, error)
	CreateDoctor(ctx context.Context, in *Doctor, opts ...grpc.CallOption) (*Doctor, error)
	GetDoctorById(ctx context.Context, in *GetReqStr, opts ...grpc.CallOption) (*Doctor, error)
	GetAllDoctors(ctx context.Context, in *GetAll, opts ...grpc.CallOption) (*ListDoctors, error)
	UpdateDoctor(ctx context.Context, in *Doctor, opts ...grpc.CallOption) (*Doctor, error)
	DeleteDoctor(ctx context.Context, in *GetReqStr, opts ...grpc.CallOption) (*Status, error)
	CreateDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*Department, error)
	GetDepartmentById(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*Department, error)
	GetAllDepartments(ctx context.Context, in *GetAll, opts ...grpc.CallOption) (*ListDepartments, error)
	UpdateDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*Department, error)
	DeleteDepartment(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*Status, error)
	CreateSpecialization(ctx context.Context, in *Specializations, opts ...grpc.CallOption) (*Specializations, error)
	GetSpecializationById(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*Specializations, error)
	GetAllSpecializations(ctx context.Context, in *GetAll, opts ...grpc.CallOption) (*ListSpecializations, error)
	UpdateSpecialization(ctx context.Context, in *Specializations, opts ...grpc.CallOption) (*Specializations, error)
	DeleteSpecialization(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*Status, error)
	CreateDocSpecPrices(ctx context.Context, in *DocSpecPrices, opts ...grpc.CallOption) (*DocSpecPrices, error)
	GetSpecPriceById(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*DocSpecPrices, error)
	GetAllSpecPrice(ctx context.Context, in *GetAll, opts ...grpc.CallOption) (*ListDoctorSpecPrice, error)
	UpdateSpecPrice(ctx context.Context, in *DocSpecPrices, opts ...grpc.CallOption) (*DocSpecPrices, error)
	DeleteSpecPrice(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*Status, error)
	GetAllDoctorsByDepartmentId(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*ListDoctors, error)
	GetAllSpecByDepartmentIdWithPrices(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*ListSpecializations, error)
	Exists(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Doctor, error)
	UpdateDoctorEmail(ctx context.Context, in *Doctor, opts ...grpc.CallOption) (*Doctor, error)
}

type healthcareServiceClient struct {
	cc *grpc.ClientConn
}

func NewHealthcareServiceClient(cc *grpc.ClientConn) HealthcareServiceClient {
	return &healthcareServiceClient{cc}
}

func (c *healthcareServiceClient) CheckUniques(ctx context.Context, in *CheckUniqReq, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/CheckUniques", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) CreateDoctor(ctx context.Context, in *Doctor, opts ...grpc.CallOption) (*Doctor, error) {
	out := new(Doctor)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/CreateDoctor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) GetDoctorById(ctx context.Context, in *GetReqStr, opts ...grpc.CallOption) (*Doctor, error) {
	out := new(Doctor)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/GetDoctorById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) GetAllDoctors(ctx context.Context, in *GetAll, opts ...grpc.CallOption) (*ListDoctors, error) {
	out := new(ListDoctors)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/GetAllDoctors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) UpdateDoctor(ctx context.Context, in *Doctor, opts ...grpc.CallOption) (*Doctor, error) {
	out := new(Doctor)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/UpdateDoctor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) DeleteDoctor(ctx context.Context, in *GetReqStr, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/DeleteDoctor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) CreateDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/CreateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) GetDepartmentById(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/GetDepartmentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) GetAllDepartments(ctx context.Context, in *GetAll, opts ...grpc.CallOption) (*ListDepartments, error) {
	out := new(ListDepartments)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/GetAllDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) UpdateDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/UpdateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) DeleteDepartment(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/DeleteDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) CreateSpecialization(ctx context.Context, in *Specializations, opts ...grpc.CallOption) (*Specializations, error) {
	out := new(Specializations)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/CreateSpecialization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) GetSpecializationById(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*Specializations, error) {
	out := new(Specializations)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/GetSpecializationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) GetAllSpecializations(ctx context.Context, in *GetAll, opts ...grpc.CallOption) (*ListSpecializations, error) {
	out := new(ListSpecializations)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/GetAllSpecializations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) UpdateSpecialization(ctx context.Context, in *Specializations, opts ...grpc.CallOption) (*Specializations, error) {
	out := new(Specializations)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/UpdateSpecialization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) DeleteSpecialization(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/DeleteSpecialization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) CreateDocSpecPrices(ctx context.Context, in *DocSpecPrices, opts ...grpc.CallOption) (*DocSpecPrices, error) {
	out := new(DocSpecPrices)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/CreateDocSpecPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) GetSpecPriceById(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*DocSpecPrices, error) {
	out := new(DocSpecPrices)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/GetSpecPriceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) GetAllSpecPrice(ctx context.Context, in *GetAll, opts ...grpc.CallOption) (*ListDoctorSpecPrice, error) {
	out := new(ListDoctorSpecPrice)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/GetAllSpecPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) UpdateSpecPrice(ctx context.Context, in *DocSpecPrices, opts ...grpc.CallOption) (*DocSpecPrices, error) {
	out := new(DocSpecPrices)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/UpdateSpecPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) DeleteSpecPrice(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/DeleteSpecPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) GetAllDoctorsByDepartmentId(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*ListDoctors, error) {
	out := new(ListDoctors)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/GetAllDoctorsByDepartmentId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) GetAllSpecByDepartmentIdWithPrices(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*ListSpecializations, error) {
	out := new(ListSpecializations)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/GetAllSpecByDepartmentIdWithPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) Exists(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Doctor, error) {
	out := new(Doctor)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthcareServiceClient) UpdateDoctorEmail(ctx context.Context, in *Doctor, opts ...grpc.CallOption) (*Doctor, error) {
	out := new(Doctor)
	err := c.cc.Invoke(ctx, "/healthcare.HealthcareService/UpdateDoctorEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthcareServiceServer is the server API for HealthcareService service.
type HealthcareServiceServer interface {
	CheckUniques(context.Context, *CheckUniqReq) (*Status, error)
	CreateDoctor(context.Context, *Doctor) (*Doctor, error)
	GetDoctorById(context.Context, *GetReqStr) (*Doctor, error)
	GetAllDoctors(context.Context, *GetAll) (*ListDoctors, error)
	UpdateDoctor(context.Context, *Doctor) (*Doctor, error)
	DeleteDoctor(context.Context, *GetReqStr) (*Status, error)
	CreateDepartment(context.Context, *Department) (*Department, error)
	GetDepartmentById(context.Context, *GetReqInt) (*Department, error)
	GetAllDepartments(context.Context, *GetAll) (*ListDepartments, error)
	UpdateDepartment(context.Context, *Department) (*Department, error)
	DeleteDepartment(context.Context, *GetReqInt) (*Status, error)
	CreateSpecialization(context.Context, *Specializations) (*Specializations, error)
	GetSpecializationById(context.Context, *GetReqInt) (*Specializations, error)
	GetAllSpecializations(context.Context, *GetAll) (*ListSpecializations, error)
	UpdateSpecialization(context.Context, *Specializations) (*Specializations, error)
	DeleteSpecialization(context.Context, *GetReqInt) (*Status, error)
	CreateDocSpecPrices(context.Context, *DocSpecPrices) (*DocSpecPrices, error)
	GetSpecPriceById(context.Context, *GetReqInt) (*DocSpecPrices, error)
	GetAllSpecPrice(context.Context, *GetAll) (*ListDoctorSpecPrice, error)
	UpdateSpecPrice(context.Context, *DocSpecPrices) (*DocSpecPrices, error)
	DeleteSpecPrice(context.Context, *GetReqInt) (*Status, error)
	GetAllDoctorsByDepartmentId(context.Context, *GetReqInt) (*ListDoctors, error)
	GetAllSpecByDepartmentIdWithPrices(context.Context, *GetReqInt) (*ListSpecializations, error)
	Exists(context.Context, *Email) (*Doctor, error)
	UpdateDoctorEmail(context.Context, *Doctor) (*Doctor, error)
}

// UnimplementedHealthcareServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHealthcareServiceServer struct {
}

func (*UnimplementedHealthcareServiceServer) CheckUniques(ctx context.Context, req *CheckUniqReq) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUniques not implemented")
}
func (*UnimplementedHealthcareServiceServer) CreateDoctor(ctx context.Context, req *Doctor) (*Doctor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctor not implemented")
}
func (*UnimplementedHealthcareServiceServer) GetDoctorById(ctx context.Context, req *GetReqStr) (*Doctor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorById not implemented")
}
func (*UnimplementedHealthcareServiceServer) GetAllDoctors(ctx context.Context, req *GetAll) (*ListDoctors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDoctors not implemented")
}
func (*UnimplementedHealthcareServiceServer) UpdateDoctor(ctx context.Context, req *Doctor) (*Doctor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctor not implemented")
}
func (*UnimplementedHealthcareServiceServer) DeleteDoctor(ctx context.Context, req *GetReqStr) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoctor not implemented")
}
func (*UnimplementedHealthcareServiceServer) CreateDepartment(ctx context.Context, req *Department) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (*UnimplementedHealthcareServiceServer) GetDepartmentById(ctx context.Context, req *GetReqInt) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentById not implemented")
}
func (*UnimplementedHealthcareServiceServer) GetAllDepartments(ctx context.Context, req *GetAll) (*ListDepartments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDepartments not implemented")
}
func (*UnimplementedHealthcareServiceServer) UpdateDepartment(ctx context.Context, req *Department) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (*UnimplementedHealthcareServiceServer) DeleteDepartment(ctx context.Context, req *GetReqInt) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (*UnimplementedHealthcareServiceServer) CreateSpecialization(ctx context.Context, req *Specializations) (*Specializations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecialization not implemented")
}
func (*UnimplementedHealthcareServiceServer) GetSpecializationById(ctx context.Context, req *GetReqInt) (*Specializations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecializationById not implemented")
}
func (*UnimplementedHealthcareServiceServer) GetAllSpecializations(ctx context.Context, req *GetAll) (*ListSpecializations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSpecializations not implemented")
}
func (*UnimplementedHealthcareServiceServer) UpdateSpecialization(ctx context.Context, req *Specializations) (*Specializations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpecialization not implemented")
}
func (*UnimplementedHealthcareServiceServer) DeleteSpecialization(ctx context.Context, req *GetReqInt) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpecialization not implemented")
}
func (*UnimplementedHealthcareServiceServer) CreateDocSpecPrices(ctx context.Context, req *DocSpecPrices) (*DocSpecPrices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocSpecPrices not implemented")
}
func (*UnimplementedHealthcareServiceServer) GetSpecPriceById(ctx context.Context, req *GetReqInt) (*DocSpecPrices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecPriceById not implemented")
}
func (*UnimplementedHealthcareServiceServer) GetAllSpecPrice(ctx context.Context, req *GetAll) (*ListDoctorSpecPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSpecPrice not implemented")
}
func (*UnimplementedHealthcareServiceServer) UpdateSpecPrice(ctx context.Context, req *DocSpecPrices) (*DocSpecPrices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpecPrice not implemented")
}
func (*UnimplementedHealthcareServiceServer) DeleteSpecPrice(ctx context.Context, req *GetReqInt) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpecPrice not implemented")
}
func (*UnimplementedHealthcareServiceServer) GetAllDoctorsByDepartmentId(ctx context.Context, req *GetReqInt) (*ListDoctors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDoctorsByDepartmentId not implemented")
}
func (*UnimplementedHealthcareServiceServer) GetAllSpecByDepartmentIdWithPrices(ctx context.Context, req *GetReqInt) (*ListSpecializations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSpecByDepartmentIdWithPrices not implemented")
}
func (*UnimplementedHealthcareServiceServer) Exists(ctx context.Context, req *Email) (*Doctor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (*UnimplementedHealthcareServiceServer) UpdateDoctorEmail(ctx context.Context, req *Doctor) (*Doctor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctorEmail not implemented")
}

func RegisterHealthcareServiceServer(s *grpc.Server, srv HealthcareServiceServer) {
	s.RegisterService(&_HealthcareService_serviceDesc, srv)
}

func _HealthcareService_CheckUniques_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUniqReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).CheckUniques(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/CheckUniques",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).CheckUniques(ctx, req.(*CheckUniqReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_CreateDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Doctor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).CreateDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/CreateDoctor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).CreateDoctor(ctx, req.(*Doctor))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_GetDoctorById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqStr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).GetDoctorById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/GetDoctorById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).GetDoctorById(ctx, req.(*GetReqStr))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_GetAllDoctors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).GetAllDoctors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/GetAllDoctors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).GetAllDoctors(ctx, req.(*GetAll))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_UpdateDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Doctor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).UpdateDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/UpdateDoctor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).UpdateDoctor(ctx, req.(*Doctor))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_DeleteDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqStr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).DeleteDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/DeleteDoctor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).DeleteDoctor(ctx, req.(*GetReqStr))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Department)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/CreateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).CreateDepartment(ctx, req.(*Department))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_GetDepartmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).GetDepartmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/GetDepartmentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).GetDepartmentById(ctx, req.(*GetReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_GetAllDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).GetAllDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/GetAllDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).GetAllDepartments(ctx, req.(*GetAll))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Department)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/UpdateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).UpdateDepartment(ctx, req.(*Department))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/DeleteDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).DeleteDepartment(ctx, req.(*GetReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_CreateSpecialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Specializations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).CreateSpecialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/CreateSpecialization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).CreateSpecialization(ctx, req.(*Specializations))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_GetSpecializationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).GetSpecializationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/GetSpecializationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).GetSpecializationById(ctx, req.(*GetReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_GetAllSpecializations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).GetAllSpecializations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/GetAllSpecializations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).GetAllSpecializations(ctx, req.(*GetAll))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_UpdateSpecialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Specializations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).UpdateSpecialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/UpdateSpecialization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).UpdateSpecialization(ctx, req.(*Specializations))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_DeleteSpecialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).DeleteSpecialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/DeleteSpecialization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).DeleteSpecialization(ctx, req.(*GetReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_CreateDocSpecPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocSpecPrices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).CreateDocSpecPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/CreateDocSpecPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).CreateDocSpecPrices(ctx, req.(*DocSpecPrices))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_GetSpecPriceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).GetSpecPriceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/GetSpecPriceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).GetSpecPriceById(ctx, req.(*GetReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_GetAllSpecPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).GetAllSpecPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/GetAllSpecPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).GetAllSpecPrice(ctx, req.(*GetAll))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_UpdateSpecPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocSpecPrices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).UpdateSpecPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/UpdateSpecPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).UpdateSpecPrice(ctx, req.(*DocSpecPrices))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_DeleteSpecPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).DeleteSpecPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/DeleteSpecPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).DeleteSpecPrice(ctx, req.(*GetReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_GetAllDoctorsByDepartmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).GetAllDoctorsByDepartmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/GetAllDoctorsByDepartmentId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).GetAllDoctorsByDepartmentId(ctx, req.(*GetReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_GetAllSpecByDepartmentIdWithPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).GetAllSpecByDepartmentIdWithPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/GetAllSpecByDepartmentIdWithPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).GetAllSpecByDepartmentIdWithPrices(ctx, req.(*GetReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).Exists(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthcareService_UpdateDoctorEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Doctor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthcareServiceServer).UpdateDoctorEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.HealthcareService/UpdateDoctorEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthcareServiceServer).UpdateDoctorEmail(ctx, req.(*Doctor))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealthcareService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "healthcare.HealthcareService",
	HandlerType: (*HealthcareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUniques",
			Handler:    _HealthcareService_CheckUniques_Handler,
		},
		{
			MethodName: "CreateDoctor",
			Handler:    _HealthcareService_CreateDoctor_Handler,
		},
		{
			MethodName: "GetDoctorById",
			Handler:    _HealthcareService_GetDoctorById_Handler,
		},
		{
			MethodName: "GetAllDoctors",
			Handler:    _HealthcareService_GetAllDoctors_Handler,
		},
		{
			MethodName: "UpdateDoctor",
			Handler:    _HealthcareService_UpdateDoctor_Handler,
		},
		{
			MethodName: "DeleteDoctor",
			Handler:    _HealthcareService_DeleteDoctor_Handler,
		},
		{
			MethodName: "CreateDepartment",
			Handler:    _HealthcareService_CreateDepartment_Handler,
		},
		{
			MethodName: "GetDepartmentById",
			Handler:    _HealthcareService_GetDepartmentById_Handler,
		},
		{
			MethodName: "GetAllDepartments",
			Handler:    _HealthcareService_GetAllDepartments_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _HealthcareService_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _HealthcareService_DeleteDepartment_Handler,
		},
		{
			MethodName: "CreateSpecialization",
			Handler:    _HealthcareService_CreateSpecialization_Handler,
		},
		{
			MethodName: "GetSpecializationById",
			Handler:    _HealthcareService_GetSpecializationById_Handler,
		},
		{
			MethodName: "GetAllSpecializations",
			Handler:    _HealthcareService_GetAllSpecializations_Handler,
		},
		{
			MethodName: "UpdateSpecialization",
			Handler:    _HealthcareService_UpdateSpecialization_Handler,
		},
		{
			MethodName: "DeleteSpecialization",
			Handler:    _HealthcareService_DeleteSpecialization_Handler,
		},
		{
			MethodName: "CreateDocSpecPrices",
			Handler:    _HealthcareService_CreateDocSpecPrices_Handler,
		},
		{
			MethodName: "GetSpecPriceById",
			Handler:    _HealthcareService_GetSpecPriceById_Handler,
		},
		{
			MethodName: "GetAllSpecPrice",
			Handler:    _HealthcareService_GetAllSpecPrice_Handler,
		},
		{
			MethodName: "UpdateSpecPrice",
			Handler:    _HealthcareService_UpdateSpecPrice_Handler,
		},
		{
			MethodName: "DeleteSpecPrice",
			Handler:    _HealthcareService_DeleteSpecPrice_Handler,
		},
		{
			MethodName: "GetAllDoctorsByDepartmentId",
			Handler:    _HealthcareService_GetAllDoctorsByDepartmentId_Handler,
		},
		{
			MethodName: "GetAllSpecByDepartmentIdWithPrices",
			Handler:    _HealthcareService_GetAllSpecByDepartmentIdWithPrices_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _HealthcareService_Exists_Handler,
		},
		{
			MethodName: "UpdateDoctorEmail",
			Handler:    _HealthcareService_UpdateDoctorEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "healthcare-service/healthcare.proto",
}

func (m *Email) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Email) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Email) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckUniqReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUniqReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckUniqReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Doctor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Doctor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Doctor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SpecIds) > 0 {
		dAtA2 := make([]byte, len(m.SpecIds)*10)
		var j1 int
		for _, num1 := range m.SpecIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintHealthcare(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.RefreshToken) > 0 {
		i -= len(m.RefreshToken)
		copy(dAtA[i:], m.RefreshToken)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.RefreshToken)))
		i--
		dAtA[i] = 0x7a
	}
	if m.DepartmentId != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.DepartmentId))
		i--
		dAtA[i] = 0x70
	}
	if m.WorkYears != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.WorkYears))
		i--
		dAtA[i] = 0x68
	}
	if len(m.EndWorkYear) > 0 {
		i -= len(m.EndWorkYear)
		copy(dAtA[i:], m.EndWorkYear)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.EndWorkYear)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.StartWorkYear) > 0 {
		i -= len(m.StartWorkYear)
		copy(dAtA[i:], m.StartWorkYear)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.StartWorkYear)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Biography) > 0 {
		i -= len(m.Biography)
		copy(dAtA[i:], m.Biography)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Biography)))
		i--
		dAtA[i] = 0x52
	}
	if m.Salary != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Salary))))
		i--
		dAtA[i] = 0x4d
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BirthDate) > 0 {
		i -= len(m.BirthDate)
		copy(dAtA[i:], m.BirthDate)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.BirthDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FullName) > 0 {
		i -= len(m.FullName)
		copy(dAtA[i:], m.FullName)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.FullName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetReqStr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReqStr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReqStr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListDoctors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDoctors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDoctors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Doctors) > 0 {
		for iNdEx := len(m.Doctors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Doctors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHealthcare(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReqInt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReqInt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReqInt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Department) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Department) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Department) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ImageUrl) > 0 {
		i -= len(m.ImageUrl)
		copy(dAtA[i:], m.ImageUrl)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.ImageUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FinishTime) > 0 {
		i -= len(m.FinishTime)
		copy(dAtA[i:], m.FinishTime)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.FinishTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ComeTime) > 0 {
		i -= len(m.ComeTime)
		copy(dAtA[i:], m.ComeTime)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.ComeTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListDepartments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDepartments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDepartments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Departments) > 0 {
		for iNdEx := len(m.Departments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Departments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHealthcare(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Specializations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Specializations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Specializations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DepartmentId != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.DepartmentId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListSpecializations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSpecializations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSpecializations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Specializations) > 0 {
		for iNdEx := len(m.Specializations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Specializations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHealthcare(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DocSpecPrices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocSpecPrices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocSpecPrices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if m.OfflinePrice != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OfflinePrice))))
		i--
		dAtA[i] = 0x2d
	}
	if m.OnlinePrice != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OnlinePrice))))
		i--
		dAtA[i] = 0x25
	}
	if m.SpecializationId != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.SpecializationId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintHealthcare(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListDoctorSpecPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDoctorSpecPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDoctorSpecPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHealthcare(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintHealthcare(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHealthcare(dAtA []byte, offset int, v uint64) int {
	offset -= sovHealthcare(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Email) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckUniqReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Doctor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.BirthDate)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	if m.Salary != 0 {
		n += 5
	}
	l = len(m.Biography)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.StartWorkYear)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.EndWorkYear)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	if m.WorkYears != 0 {
		n += 1 + sovHealthcare(uint64(m.WorkYears))
	}
	if m.DepartmentId != 0 {
		n += 1 + sovHealthcare(uint64(m.DepartmentId))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovHealthcare(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovHealthcare(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 2 + l + sovHealthcare(uint64(l))
	}
	if len(m.SpecIds) > 0 {
		l = 0
		for _, e := range m.SpecIds {
			l += sovHealthcare(uint64(e))
		}
		n += 2 + sovHealthcare(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetReqStr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovHealthcare(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovHealthcare(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDoctors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovHealthcare(uint64(m.Count))
	}
	if len(m.Doctors) > 0 {
		for _, e := range m.Doctors {
			l = e.Size()
			n += 1 + l + sovHealthcare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetReqInt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHealthcare(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Department) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHealthcare(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.ComeTime)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.FinishTime)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDepartments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovHealthcare(uint64(m.Count))
	}
	if len(m.Departments) > 0 {
		for _, e := range m.Departments {
			l = e.Size()
			n += 1 + l + sovHealthcare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Specializations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHealthcare(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	if m.DepartmentId != 0 {
		n += 1 + sovHealthcare(uint64(m.DepartmentId))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSpecializations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovHealthcare(uint64(m.Count))
	}
	if len(m.Specializations) > 0 {
		for _, e := range m.Specializations {
			l = e.Size()
			n += 1 + l + sovHealthcare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DocSpecPrices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHealthcare(uint64(m.Id))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	if m.SpecializationId != 0 {
		n += 1 + sovHealthcare(uint64(m.SpecializationId))
	}
	if m.OnlinePrice != 0 {
		n += 5
	}
	if m.OfflinePrice != 0 {
		n += 5
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovHealthcare(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDoctorSpecPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovHealthcare(uint64(m.Count))
	}
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovHealthcare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHealthcare(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHealthcare(x uint64) (n int) {
	return sovHealthcare(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Email) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Email: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Email: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUniqReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUniqReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUniqReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Doctor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Doctor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Doctor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BirthDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salary", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Salary = float32(math.Float32frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biography", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Biography = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartWorkYear", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartWorkYear = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndWorkYear", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndWorkYear = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkYears", wireType)
			}
			m.WorkYears = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkYears |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			m.DepartmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepartmentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHealthcare
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SpecIds = append(m.SpecIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHealthcare
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHealthcare
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthHealthcare
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SpecIds) == 0 {
					m.SpecIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealthcare
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SpecIds = append(m.SpecIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReqStr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReqStr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReqStr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDoctors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDoctors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDoctors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doctors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doctors = append(m.Doctors, &Doctor{})
			if err := m.Doctors[len(m.Doctors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReqInt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReqInt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReqInt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Department) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Department: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Department: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComeTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComeTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinishTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDepartments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDepartments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDepartments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Departments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Departments = append(m.Departments, &Department{})
			if err := m.Departments[len(m.Departments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Specializations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Specializations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Specializations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			m.DepartmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepartmentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSpecializations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSpecializations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSpecializations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Specializations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Specializations = append(m.Specializations, &Specializations{})
			if err := m.Specializations[len(m.Specializations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocSpecPrices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocSpecPrices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocSpecPrices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecializationId", wireType)
			}
			m.SpecializationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecializationId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlinePrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OnlinePrice = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflinePrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OfflinePrice = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDoctorSpecPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDoctorSpecPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDoctorSpecPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthcare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthcare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, &DocSpecPrices{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHealthcare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthcare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHealthcare(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHealthcare
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHealthcare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHealthcare
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHealthcare
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHealthcare
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHealthcare        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHealthcare          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHealthcare = fmt.Errorf("proto: unexpected end of group")
)
